/**
 * Flowtype definitions for index.ts
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.14.1
 */

// THANK YOU SO MUCH FLOWGEN - saved me from typing hell wooooo

export type GenericIndexable<T> = {
  [key: number]: T,
  +length: number,
  ...
};
declare type TypedArray =
  | Int8Array
  | Int16Array
  | Int32Array
  | Uint8Array
  | Uint16Array
  | Uint32Array
  | Float32Array
  | Float64Array;
export type Indexable<T> = string | T[] | TypedArray | GenericIndexable<T>;
export type Sliceable<T> = {
  slice(start: number, end?: number): this,
  ...
} & GenericIndexable<T>;
declare type Vec4 = [number, number, number, number];
declare type Vec3 = [number, number, number];
declare type DiffState = {
  i: number,
  N: number,
  j: number,
  M: number,
  Z: number,
  b: TypedArray,
  eq: (x: number, y: number) => boolean,
  pxs: number,
  pxe: number,
  pys: number,
  pye: number,
  oxs: number,
  oxe: number,
  oys: number,
  oye: number,
  stack_top: number,
  stack_base: number[],
  ...
};
declare function diff_internal(state: DiffState, c: number): number;
declare class DiffGen mixins IterableIterator<Vec4> {
  constructor(state: DiffState): this;
  @@iterator: () => void;
  undefined: /* NO PRINT IMPLEMENTED: SemicolonClassElement */ any;
  next(): void;
}
declare export function diff_core(
  i: number,
  N: number,
  j: number,
  M: number,
  eq: (i: number, j: number) => boolean
): IterableIterator<Vec4>;
declare export function diff<T: Indexable<mixed>>(
  xs: T,
  ys: T
): IterableIterator<Vec4>;
declare class LCSGen mixins IterableIterator<Vec3> {
  constructor(diff: IterableIterator<Vec4>, N: number): this;
  @@iterator: () => void;
  undefined: /* NO PRINT IMPLEMENTED: SemicolonClassElement */ any;
  next(): void;
}
declare export function lcs<T: Indexable<mixed>>(
  xs: T,
  ys: T
): IterableIterator<Vec3>;
declare export function calcPatch<T, S: Sliceable<T>>(
  xs: S,
  ys: S
): Generator<[number, number, S]>;
declare export function applyPatch<T, S: Sliceable<T>>(
  xs: S,
  patch: Iterable<[number, number, S]>
): Generator<S>;
